// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/terraform (interfaces: OutputHelper)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	terraform "github.com/runatlantis/atlantis/server/events/terraform"
	logging "github.com/runatlantis/atlantis/server/logging"
	"reflect"
	"time"
)

type MockOutputHelper struct {
	fail func(message string, callerSkip ...int)
}

func NewMockOutputHelper(options ...pegomock.Option) *MockOutputHelper {
	mock := &MockOutputHelper{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockOutputHelper) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockOutputHelper) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockOutputHelper) List() ([]terraform.TfOutputFile, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockOutputHelper().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("List", params, []reflect.Type{reflect.TypeOf((*[]terraform.TfOutputFile)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []terraform.TfOutputFile
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]terraform.TfOutputFile)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockOutputHelper) ParseFileName(fileName string) (terraform.TfOutputFile, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockOutputHelper().")
	}
	params := []pegomock.Param{fileName}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ParseFileName", params, []reflect.Type{reflect.TypeOf((*terraform.TfOutputFile)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 terraform.TfOutputFile
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(terraform.TfOutputFile)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockOutputHelper) CreateFileName(fullRepoName string, pullRequestNr int, headCommit string, project string, workspace string, tfCommand string) string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockOutputHelper().")
	}
	params := []pegomock.Param{fullRepoName, pullRequestNr, headCommit, project, workspace, tfCommand}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CreateFileName", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockOutputHelper) ContinueReadFile(Log *logging.SimpleLogger, fileName string, fileText chan<- string, done chan bool) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockOutputHelper().")
	}
	params := []pegomock.Param{Log, fileName, fileText, done}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ContinueReadFile", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockOutputHelper) FindOutputFile(createdAt string, fullRepoName string, pullNr string, project string, headCommit string, workspace string, tfCommand string) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockOutputHelper().")
	}
	params := []pegomock.Param{createdAt, fullRepoName, pullNr, project, headCommit, workspace, tfCommand}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FindOutputFile", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockOutputHelper) VerifyWasCalledOnce() *VerifierMockOutputHelper {
	return &VerifierMockOutputHelper{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockOutputHelper) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockOutputHelper {
	return &VerifierMockOutputHelper{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockOutputHelper) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockOutputHelper {
	return &VerifierMockOutputHelper{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockOutputHelper) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockOutputHelper {
	return &VerifierMockOutputHelper{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockOutputHelper struct {
	mock                   *MockOutputHelper
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockOutputHelper) List() *MockOutputHelper_List_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "List", params, verifier.timeout)
	return &MockOutputHelper_List_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockOutputHelper_List_OngoingVerification struct {
	mock              *MockOutputHelper
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockOutputHelper_List_OngoingVerification) GetCapturedArguments() {
}

func (c *MockOutputHelper_List_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockOutputHelper) ParseFileName(fileName string) *MockOutputHelper_ParseFileName_OngoingVerification {
	params := []pegomock.Param{fileName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ParseFileName", params, verifier.timeout)
	return &MockOutputHelper_ParseFileName_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockOutputHelper_ParseFileName_OngoingVerification struct {
	mock              *MockOutputHelper
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockOutputHelper_ParseFileName_OngoingVerification) GetCapturedArguments() string {
	fileName := c.GetAllCapturedArguments()
	return fileName[len(fileName)-1]
}

func (c *MockOutputHelper_ParseFileName_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockOutputHelper) CreateFileName(fullRepoName string, pullRequestNr int, headCommit string, project string, workspace string, tfCommand string) *MockOutputHelper_CreateFileName_OngoingVerification {
	params := []pegomock.Param{fullRepoName, pullRequestNr, headCommit, project, workspace, tfCommand}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CreateFileName", params, verifier.timeout)
	return &MockOutputHelper_CreateFileName_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockOutputHelper_CreateFileName_OngoingVerification struct {
	mock              *MockOutputHelper
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockOutputHelper_CreateFileName_OngoingVerification) GetCapturedArguments() (string, int, string, string, string, string) {
	fullRepoName, pullRequestNr, headCommit, project, workspace, tfCommand := c.GetAllCapturedArguments()
	return fullRepoName[len(fullRepoName)-1], pullRequestNr[len(pullRequestNr)-1], headCommit[len(headCommit)-1], project[len(project)-1], workspace[len(workspace)-1], tfCommand[len(tfCommand)-1]
}

func (c *MockOutputHelper_CreateFileName_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []int, _param2 []string, _param3 []string, _param4 []string, _param5 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]int, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(int)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
		_param3 = make([]string, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(string)
		}
		_param4 = make([]string, len(c.methodInvocations))
		for u, param := range params[4] {
			_param4[u] = param.(string)
		}
		_param5 = make([]string, len(c.methodInvocations))
		for u, param := range params[5] {
			_param5[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockOutputHelper) ContinueReadFile(Log *logging.SimpleLogger, fileName string, fileText chan<- string, done chan bool) *MockOutputHelper_ContinueReadFile_OngoingVerification {
	params := []pegomock.Param{Log, fileName, fileText, done}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ContinueReadFile", params, verifier.timeout)
	return &MockOutputHelper_ContinueReadFile_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockOutputHelper_ContinueReadFile_OngoingVerification struct {
	mock              *MockOutputHelper
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockOutputHelper_ContinueReadFile_OngoingVerification) GetCapturedArguments() (*logging.SimpleLogger, string, chan<- string, chan bool) {
	Log, fileName, fileText, done := c.GetAllCapturedArguments()
	return Log[len(Log)-1], fileName[len(fileName)-1], fileText[len(fileText)-1], done[len(done)-1]
}

func (c *MockOutputHelper_ContinueReadFile_OngoingVerification) GetAllCapturedArguments() (_param0 []*logging.SimpleLogger, _param1 []string, _param2 []chan<- string, _param3 []chan bool) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*logging.SimpleLogger, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*logging.SimpleLogger)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]chan<- string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(chan<- string)
		}
		_param3 = make([]chan bool, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(chan bool)
		}
	}
	return
}

func (verifier *VerifierMockOutputHelper) FindOutputFile(createdAt string, fullRepoName string, pullNr string, project string, headCommit string, workspace string, tfCommand string) *MockOutputHelper_FindOutputFile_OngoingVerification {
	params := []pegomock.Param{createdAt, fullRepoName, pullNr, project, headCommit, workspace, tfCommand}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FindOutputFile", params, verifier.timeout)
	return &MockOutputHelper_FindOutputFile_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockOutputHelper_FindOutputFile_OngoingVerification struct {
	mock              *MockOutputHelper
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockOutputHelper_FindOutputFile_OngoingVerification) GetCapturedArguments() (string, string, string, string, string, string, string) {
	createdAt, fullRepoName, pullNr, project, headCommit, workspace, tfCommand := c.GetAllCapturedArguments()
	return createdAt[len(createdAt)-1], fullRepoName[len(fullRepoName)-1], pullNr[len(pullNr)-1], project[len(project)-1], headCommit[len(headCommit)-1], workspace[len(workspace)-1], tfCommand[len(tfCommand)-1]
}

func (c *MockOutputHelper_FindOutputFile_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []string, _param3 []string, _param4 []string, _param5 []string, _param6 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
		_param3 = make([]string, len(c.methodInvocations))
		for u, param := range params[3] {
			_param3[u] = param.(string)
		}
		_param4 = make([]string, len(c.methodInvocations))
		for u, param := range params[4] {
			_param4[u] = param.(string)
		}
		_param5 = make([]string, len(c.methodInvocations))
		for u, param := range params[5] {
			_param5[u] = param.(string)
		}
		_param6 = make([]string, len(c.methodInvocations))
		for u, param := range params[6] {
			_param6[u] = param.(string)
		}
	}
	return
}
